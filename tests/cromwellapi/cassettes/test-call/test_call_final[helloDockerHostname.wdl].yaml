interactions:
- request:
    body: "--b9e5b5b00cba54dfc1349c99f585ce52\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"helloDockerHostname.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n## This is a test workflow that returns the Docker image name and tag\n##
      and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
      HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"
      \ # Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
      Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
      = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
      {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
      completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
      = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
      {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n
      \   Boolean within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n
      \ parameter_meta {\n    docker_image: \"Docker image to run the task in (e.g.
      ubuntu:latest)\"\n  }\n}\n\n#### TASK DEFINITIONS\n\ntask GetStartTime {\n  command
      <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n
      \ }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1
      GB\"\n  }\n}\n\ntask GetEndTime {\n  input {\n    File hostname_done  # Add
      dependency on Hostname completion\n  }\n\n  command <<<\n    date +%s.%N\n  >>>\n\n
      \ output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n
      \   docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
      ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n
      \ }\n\n  command <<<\n    # Calculate duration using awk for floating point
      arithmetic\n    duration=$(awk \"BEGIN {print ~{end_time} - ~{start_time}}\")\n
      \   echo \"$duration\" > duration.txt\n    \n    # Check if duration is less
      than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\" 'BEGIN {if (dur <
      120) exit 0; exit 1}'\n    if [ $? -eq 0 ]; then\n      echo \"true\" > within_limit.txt\n
      \   else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
      {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean within_limit
      = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n
      \   cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname {\n  input {\n    String
      expected_image\n    Float start_time  # Add start_time as input to create dependency\n
      \ }\n\n  command <<<\n    # Split expected image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo
      \"~{expected_image}\" | cut -d':' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\"
      | cut -d':' -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\"
      /etc/os-release | head -n1 | cut -d'=' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
      /etc/os-release | cut -d'\"' -f2)\n\n    # Compare image name\n    if [[ \"$CURRENT_IMAGE\"
      != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error: Expected Docker image
      $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit 1\n    fi\n\n    #
      Compare version/tag\n    if [[ \"$CURRENT_VERSION\" != \"$EXPECTED_TAG\" ]];
      then\n      echo \"Error: Expected version $EXPECTED_TAG but got: $CURRENT_VERSION\"\n
      \     exit 1\n    fi\n\n    echo \"Verified Docker Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n
      \   echo \"Expected Image: ~{expected_image}\"\n    echo \"Hostname: $(hostname)\"\n
      \ >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime {\n    cpu: 1\n
      \   memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
      {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n\r\n--b9e5b5b00cba54dfc1349c99f585ce52\r\nContent-Disposition:
      form-data; name=\"workflowInputs\"; filename=\"inputs.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"HelloDockerHostname.docker_image\": \"ubuntu:20.04\"\n}\n\r\n--b9e5b5b00cba54dfc1349c99f585ce52\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--b9e5b5b00cba54dfc1349c99f585ce52--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '4114'
      content-type:
      - multipart/form-data; boundary=b9e5b5b00cba54dfc1349c99f585ce52
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1
  response:
    body:
      string: '{"id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:50:22 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:50:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:50:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:50:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:50:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:50:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:50:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:50:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:51:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:52:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:52:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:52:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:52:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:52:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:52:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:52:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:52:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:52:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:52:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:52:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:53:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:54:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:55:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:56:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:57:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:58:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:58:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:58:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:58:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:58:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:58:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:58:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:58:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:58:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:58:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:58:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 17:59:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:00:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:01:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:02:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:03:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:04:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:04:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:04:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:04:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:04:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:04:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:04:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:04:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:04:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:04:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:04:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:05:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:06:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:07:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:08:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:09:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:10:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:10:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:10:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:10:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:10:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:10:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:10:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:10:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-23T18:10:38.210Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:10:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4744'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-23T18:10:38.210Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:10:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4744'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"25546232","backend":"gizmo","attempt":1,"start":"2025-06-23T18:10:38.210Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:10:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5546'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"25546232","backend":"gizmo","attempt":1,"start":"2025-06-23T18:10:38.210Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5546'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"25546232","backend":"gizmo","attempt":1,"start":"2025-06-23T18:10:38.210Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5546'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"25546232","backend":"gizmo","attempt":1,"start":"2025-06-23T18:10:38.210Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5546'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"25546232","backend":"gizmo","attempt":1,"start":"2025-06-23T18:10:38.210Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5546'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-23T18:11:19.004Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6562'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-23T18:11:19.004Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6562'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"backend":"gizmo","attempt":1,"start":"2025-06-23T18:11:19.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8190'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Running","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"jobId":"25546247","backend":"gizmo","attempt":1,"start":"2025-06-23T18:11:19.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8235'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Running","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"jobId":"25546247","backend":"gizmo","attempt":1,"start":"2025-06-23T18:11:19.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8235'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Running","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"jobId":"25546247","backend":"gizmo","attempt":1,"start":"2025-06-23T18:11:19.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8235'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Running","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"jobId":"25546247","backend":"gizmo","attempt":1,"start":"2025-06-23T18:11:19.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8235'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Running","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"jobId":"25546247","backend":"gizmo","attempt":1,"start":"2025-06-23T18:11:19.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:11:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8235'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '9216'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:00.824Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '9371'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:00.824Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10280'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"jobId":"25546269","backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:00.824Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10325'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"jobId":"25546269","backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:00.824Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10325'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"jobId":"25546269","backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:00.824Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10325'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"jobId":"25546269","backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:00.824Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10325'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"jobId":"25546269","backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:00.824Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10325'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"jobId":"25546269","backend":"gizmo","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","attempt":1,"start":"2025-06-23T18:12:00.824Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10421'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702328.5974545},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"25546269","backend":"gizmo","start":"2025-06-23T18:12:00.824Z","end":"2025-06-23T18:12:39.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:12:05.795Z","description":"PreparingJob","endTime":"2025-06-23T18:12:05.805Z"},{"startTime":"2025-06-23T18:12:05.805Z","description":"RunningJob","endTime":"2025-06-23T18:12:39.845Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"Pending","endTime":"2025-06-23T18:12:00.824Z"},{"startTime":"2025-06-23T18:12:05.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:12:05.795Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:12:05.794Z"},{"startTime":"2025-06-23T18:12:39.845Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:12:39.949Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:41.624Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11354'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702328.5974545},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"25546269","backend":"gizmo","start":"2025-06-23T18:12:00.824Z","end":"2025-06-23T18:12:39.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:12:05.795Z","description":"PreparingJob","endTime":"2025-06-23T18:12:05.805Z"},{"startTime":"2025-06-23T18:12:05.805Z","description":"RunningJob","endTime":"2025-06-23T18:12:39.845Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"Pending","endTime":"2025-06-23T18:12:00.824Z"},{"startTime":"2025-06-23T18:12:05.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:12:05.795Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:12:05.794Z"},{"startTime":"2025-06-23T18:12:39.845Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:12:39.949Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stdout","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7507023285974545E9 - 1.7507022502748814E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1750702328.5974545,"start_time":1750702250.2748814},"backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:41.624Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12594'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702328.5974545},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"25546269","backend":"gizmo","start":"2025-06-23T18:12:00.824Z","end":"2025-06-23T18:12:39.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:12:05.795Z","description":"PreparingJob","endTime":"2025-06-23T18:12:05.805Z"},{"startTime":"2025-06-23T18:12:05.805Z","description":"RunningJob","endTime":"2025-06-23T18:12:39.845Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"Pending","endTime":"2025-06-23T18:12:00.824Z"},{"startTime":"2025-06-23T18:12:05.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:12:05.795Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:12:05.794Z"},{"startTime":"2025-06-23T18:12:39.845Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:12:39.949Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7507023285974545E9 - 1.7507022502748814E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1750702328.5974545,"start_time":1750702250.2748814},"jobId":"25546288","backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:41.624Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:12:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702328.5974545},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"25546269","backend":"gizmo","start":"2025-06-23T18:12:00.824Z","end":"2025-06-23T18:12:39.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:12:05.795Z","description":"PreparingJob","endTime":"2025-06-23T18:12:05.805Z"},{"startTime":"2025-06-23T18:12:05.805Z","description":"RunningJob","endTime":"2025-06-23T18:12:39.845Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"Pending","endTime":"2025-06-23T18:12:00.824Z"},{"startTime":"2025-06-23T18:12:05.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:12:05.795Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:12:05.794Z"},{"startTime":"2025-06-23T18:12:39.845Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:12:39.949Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7507023285974545E9 - 1.7507022502748814E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1750702328.5974545,"start_time":1750702250.2748814},"jobId":"25546288","backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:41.624Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:13:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702328.5974545},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"25546269","backend":"gizmo","start":"2025-06-23T18:12:00.824Z","end":"2025-06-23T18:12:39.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:12:05.795Z","description":"PreparingJob","endTime":"2025-06-23T18:12:05.805Z"},{"startTime":"2025-06-23T18:12:05.805Z","description":"RunningJob","endTime":"2025-06-23T18:12:39.845Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"Pending","endTime":"2025-06-23T18:12:00.824Z"},{"startTime":"2025-06-23T18:12:05.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:12:05.795Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:12:05.794Z"},{"startTime":"2025-06-23T18:12:39.845Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:12:39.949Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7507023285974545E9 - 1.7507022502748814E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1750702328.5974545,"start_time":1750702250.2748814},"jobId":"25546288","backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:41.624Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:13:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702328.5974545},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"25546269","backend":"gizmo","start":"2025-06-23T18:12:00.824Z","end":"2025-06-23T18:12:39.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:12:05.795Z","description":"PreparingJob","endTime":"2025-06-23T18:12:05.805Z"},{"startTime":"2025-06-23T18:12:05.805Z","description":"RunningJob","endTime":"2025-06-23T18:12:39.845Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"Pending","endTime":"2025-06-23T18:12:00.824Z"},{"startTime":"2025-06-23T18:12:05.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:12:05.795Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:12:05.794Z"},{"startTime":"2025-06-23T18:12:39.845Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:12:39.949Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7507023285974545E9 - 1.7507022502748814E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1750702328.5974545,"start_time":1750702250.2748814},"jobId":"25546288","backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:41.624Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:13:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702328.5974545},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"25546269","backend":"gizmo","start":"2025-06-23T18:12:00.824Z","end":"2025-06-23T18:12:39.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:12:05.795Z","description":"PreparingJob","endTime":"2025-06-23T18:12:05.805Z"},{"startTime":"2025-06-23T18:12:05.805Z","description":"RunningJob","endTime":"2025-06-23T18:12:39.845Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"Pending","endTime":"2025-06-23T18:12:00.824Z"},{"startTime":"2025-06-23T18:12:05.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:12:05.795Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:12:05.794Z"},{"startTime":"2025-06-23T18:12:39.845Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:12:39.949Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7507023285974545E9 - 1.7507022502748814E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1750702328.5974545,"start_time":1750702250.2748814},"jobId":"25546288","backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:41.624Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:13:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702328.5974545},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"25546269","backend":"gizmo","start":"2025-06-23T18:12:00.824Z","end":"2025-06-23T18:12:39.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:12:05.795Z","description":"PreparingJob","endTime":"2025-06-23T18:12:05.805Z"},{"startTime":"2025-06-23T18:12:05.805Z","description":"RunningJob","endTime":"2025-06-23T18:12:39.845Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"Pending","endTime":"2025-06-23T18:12:00.824Z"},{"startTime":"2025-06-23T18:12:05.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:12:05.795Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:12:05.794Z"},{"startTime":"2025-06-23T18:12:39.845Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:12:39.949Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7507023285974545E9 - 1.7507022502748814E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1750702328.5974545,"start_time":1750702250.2748814},"jobId":"25546288","backend":"gizmo","attempt":1,"start":"2025-06-23T18:12:41.624Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:13:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok138.fhcrc.org:40149
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok138.fhcrc.org:40149/api/workflows/v1/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-17cb9df","description":"PickedUp","timestamp":"2025-06-23T18:10:37.161Z","cromwellVersion":"87"},{"cromwellId":"cromid-17cb9df","description":"Finished","timestamp":"2025-06-23T18:13:22.417Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702250.2748814},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"25546232","backend":"gizmo","start":"2025-06-23T18:10:38.210Z","end":"2025-06-23T18:11:17.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:10:45.808Z","description":"RunningJob","endTime":"2025-06-23T18:11:17.186Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:10:45.794Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"Pending","endTime":"2025-06-23T18:10:38.210Z"},{"startTime":"2025-06-23T18:10:45.794Z","description":"PreparingJob","endTime":"2025-06-23T18:10:45.808Z"},{"startTime":"2025-06-23T18:11:17.186Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:17.949Z"},{"startTime":"2025-06-23T18:10:38.210Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:10:45.794Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1750702250.2748814,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"25546247","backend":"gizmo","start":"2025-06-23T18:11:19.004Z","end":"2025-06-23T18:11:58.950Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:11:25.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:11:25.794Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"Pending","endTime":"2025-06-23T18:11:19.004Z"},{"startTime":"2025-06-23T18:11:58.495Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:11:58.950Z"},{"startTime":"2025-06-23T18:11:25.794Z","description":"PreparingJob","endTime":"2025-06-23T18:11:25.802Z"},{"startTime":"2025-06-23T18:11:25.802Z","description":"RunningJob","endTime":"2025-06-23T18:11:58.495Z"},{"startTime":"2025-06-23T18:11:19.004Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:11:25.794Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1750702328.5974545},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"25546269","backend":"gizmo","start":"2025-06-23T18:12:00.824Z","end":"2025-06-23T18:12:39.949Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:12:05.795Z","description":"PreparingJob","endTime":"2025-06-23T18:12:05.805Z"},{"startTime":"2025-06-23T18:12:05.805Z","description":"RunningJob","endTime":"2025-06-23T18:12:39.845Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"Pending","endTime":"2025-06-23T18:12:00.824Z"},{"startTime":"2025-06-23T18:12:05.794Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:12:05.795Z"},{"startTime":"2025-06-23T18:12:00.824Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:12:05.794Z"},{"startTime":"2025-06-23T18:12:39.845Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:12:39.949Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stdout","backendStatus":"Done","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7507023285974545E9 - 1.7507022502748814E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"outputs":{"within_limit":true,"duration_seconds":78.3226},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1750702328.5974545,"start_time":1750702250.2748814},"returnCode":0,"jobId":"25546288","backend":"gizmo","start":"2025-06-23T18:12:41.624Z","end":"2025-06-23T18:13:20.948Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-ValidateExecutionTime","attempt":1,"executionEvents":[{"startTime":"2025-06-23T18:12:45.795Z","description":"WaitingForValueStore","endTime":"2025-06-23T18:12:45.795Z"},{"startTime":"2025-06-23T18:12:41.624Z","description":"RequestingExecutionToken","endTime":"2025-06-23T18:12:45.795Z"},{"startTime":"2025-06-23T18:12:45.832Z","description":"RunningJob","endTime":"2025-06-23T18:13:20.794Z"},{"startTime":"2025-06-23T18:12:45.795Z","description":"PreparingJob","endTime":"2025-06-23T18:12:45.832Z"},{"startTime":"2025-06-23T18:12:41.624Z","description":"Pending","endTime":"2025-06-23T18:12:41.624Z"},{"startTime":"2025-06-23T18:13:20.794Z","description":"UpdatingJobStore","endTime":"2025-06-23T18:13:20.948Z"}]}]},"outputs":{"HelloDockerHostname.within_time_limit":true,"HelloDockerHostname.execution_time_seconds":78.3226,"HelloDockerHostname.stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94/call-Hostname/execution/stdout"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-06-23T18:13:22.417Z","start":"2025-06-23T18:10:37.162Z","id":"f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-f4ed9b2f-b1e4-41dd-b1fa-c9f928186f94"},"submission":"2025-06-23T17:50:22.982Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 23 Jun 2025 18:13:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '13941'
    status:
      code: 200
      message: OK
version: 1
