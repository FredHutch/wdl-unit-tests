interactions:
- request:
    body: "--2891792c99c07e52b68fc82be48f6c0c\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"helloDockerHostname.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n## This is a test workflow that returns the Docker image name and tag\n##
      and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
      HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"
      \ # Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
      Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
      = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
      {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
      completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
      = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
      {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n
      \   Boolean within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n
      \ parameter_meta {\n    docker_image: \"Docker image to run the task in (e.g.
      ubuntu:latest)\"\n  }\n}\n\n#### TASK DEFINITIONS\n\ntask GetStartTime {\n  command
      <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n
      \ }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1
      GB\"\n  }\n}\n\ntask GetEndTime {\n  input {\n    File hostname_done  # Add
      dependency on Hostname completion\n  }\n\n  command <<<\n    date +%s.%N\n  >>>\n\n
      \ output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n
      \   docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
      ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n
      \ }\n\n  command <<<\n    # Calculate duration using awk for floating point
      arithmetic\n    duration=$(awk \"BEGIN {print ~{end_time} - ~{start_time}}\")\n
      \   echo \"$duration\" > duration.txt\n    \n    # Check if duration is less
      than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\" 'BEGIN {if (dur <
      120) exit 0; exit 1}'\n    if [ $? -eq 0 ]; then\n      echo \"true\" > within_limit.txt\n
      \   else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
      {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean within_limit
      = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n
      \   cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname {\n  input {\n    String
      expected_image\n    Float start_time  # Add start_time as input to create dependency\n
      \ }\n\n  command <<<\n    # Split expected image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo
      \"~{expected_image}\" | cut -d':' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\"
      | cut -d':' -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\"
      /etc/os-release | head -n1 | cut -d'=' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
      /etc/os-release | cut -d'\"' -f2)\n\n    # Compare image name\n    if [[ \"$CURRENT_IMAGE\"
      != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error: Expected Docker image
      $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit 1\n    fi\n\n    #
      Compare version/tag\n    if [[ \"$CURRENT_VERSION\" != \"$EXPECTED_TAG\" ]];
      then\n      echo \"Error: Expected version $EXPECTED_TAG but got: $CURRENT_VERSION\"\n
      \     exit 1\n    fi\n\n    echo \"Verified Docker Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n
      \   echo \"Expected Image: ~{expected_image}\"\n    echo \"Hostname: $(hostname)\"\n
      \ >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime {\n    cpu: 1\n
      \   memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
      {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n\r\n--2891792c99c07e52b68fc82be48f6c0c\r\nContent-Disposition:
      form-data; name=\"workflowInputs\"; filename=\"inputs.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"HelloDockerHostname.docker_image\": \"ubuntu:20.04\"\n}\n\r\n--2891792c99c07e52b68fc82be48f6c0c\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--2891792c99c07e52b68fc82be48f6c0c--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '4114'
      content-type:
      - multipart/form-data; boundary=2891792c99c07e52b68fc82be48f6c0c
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1
  response:
    body:
      string: '{"id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:39:36 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:39:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This is a test workflow
        that returns the Docker image name and tag\n## and measures execution time
        of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname
        {\n  input {\n    String docker_image = \"ubuntu:20.04\"  # Default value
        but can be overridden\n  }\n\n  call GetStartTime\n\n  call Hostname {\n    input:\n      expected_image
        = docker_image,\n      start_time = GetStartTime.timestamp  # Add dependency
        on start time\n  }\n\n  call GetEndTime {\n    input:\n      hostname_done
        = Hostname.out  # Add dependency on Hostname completion\n  }\n\n  call ValidateExecutionTime
        {\n    input:\n      start_time = GetStartTime.timestamp,\n      end_time
        = GetEndTime.timestamp\n  }\n\n  output {\n    File stdout = Hostname.out\n    Float
        execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:39:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4145'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:39:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4588'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-06-01T03:39:47.712Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:39:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5501'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"22669873","backend":"gizmo","attempt":1,"start":"2025-06-01T03:39:47.712Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5546'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"22669873","backend":"gizmo","attempt":1,"start":"2025-06-01T03:39:47.712Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5546'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"22669873","backend":"gizmo","attempt":1,"start":"2025-06-01T03:39:47.712Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5546'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"22669873","backend":"gizmo","attempt":1,"start":"2025-06-01T03:39:47.712Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5546'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"22669873","backend":"gizmo","attempt":1,"start":"2025-06-01T03:39:47.712Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5546'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"22669873","backend":"gizmo","attempt":1,"start":"2025-06-01T03:39:47.712Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5546'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-01T03:40:30.547Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6562'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-01T03:40:30.547Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6562'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"backend":"gizmo","attempt":1,"start":"2025-06-01T03:40:30.547Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8190'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Running","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"jobId":"22669874","backend":"gizmo","attempt":1,"start":"2025-06-01T03:40:30.547Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8235'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Running","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"jobId":"22669874","backend":"gizmo","attempt":1,"start":"2025-06-01T03:40:30.547Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8235'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Running","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"jobId":"22669874","backend":"gizmo","attempt":1,"start":"2025-06-01T03:40:30.547Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:40:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8235'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Running","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"jobId":"22669874","backend":"gizmo","attempt":1,"start":"2025-06-01T03:40:30.547Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8235'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Running","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"jobId":"22669874","backend":"gizmo","attempt":1,"start":"2025-06-01T03:40:30.547Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8235'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Running","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"jobId":"22669874","backend":"gizmo","attempt":1,"start":"2025-06-01T03:40:30.547Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8235'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:16.446Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '9371'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:16.446Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10280'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"jobId":"22669881","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:16.446Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10325'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"jobId":"22669881","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:16.446Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10325'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"jobId":"22669881","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:16.446Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10325'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"jobId":"22669881","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:16.446Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10325'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"jobId":"22669881","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:16.446Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10325'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Running","commandLine":"date
        +%s.%N","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"jobId":"22669881","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:16.446Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10325'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749282.4910445},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"22669881","backend":"gizmo","start":"2025-06-01T03:41:16.446Z","end":"2025-06-01T03:41:56.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:41:19.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:55.707Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:56.363Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:19.612Z","description":"RunningJob","endTime":"2025-06-01T03:41:55.707Z"},{"startTime":"2025-06-01T03:41:19.606Z","description":"PreparingJob","endTime":"2025-06-01T03:41:19.612Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"Pending","endTime":"2025-06-01T03:41:16.446Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:41:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11188'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749282.4910445},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"22669881","backend":"gizmo","start":"2025-06-01T03:41:16.446Z","end":"2025-06-01T03:41:56.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:41:19.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:55.707Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:56.363Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:19.612Z","description":"RunningJob","endTime":"2025-06-01T03:41:55.707Z"},{"startTime":"2025-06-01T03:41:19.606Z","description":"PreparingJob","endTime":"2025-06-01T03:41:19.612Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"Pending","endTime":"2025-06-01T03:41:16.446Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stdout","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7487492824910445E9 - 1.7487491959362624E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1748749282.4910445,"start_time":1748749195.9362624},"backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:58.266Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:42:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12594'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749282.4910445},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"22669881","backend":"gizmo","start":"2025-06-01T03:41:16.446Z","end":"2025-06-01T03:41:56.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:41:19.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:55.707Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:56.363Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:19.612Z","description":"RunningJob","endTime":"2025-06-01T03:41:55.707Z"},{"startTime":"2025-06-01T03:41:19.606Z","description":"PreparingJob","endTime":"2025-06-01T03:41:19.612Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"Pending","endTime":"2025-06-01T03:41:16.446Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7487492824910445E9 - 1.7487491959362624E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1748749282.4910445,"start_time":1748749195.9362624},"jobId":"22669884","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:58.266Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:42:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749282.4910445},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"22669881","backend":"gizmo","start":"2025-06-01T03:41:16.446Z","end":"2025-06-01T03:41:56.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:41:19.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:55.707Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:56.363Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:19.612Z","description":"RunningJob","endTime":"2025-06-01T03:41:55.707Z"},{"startTime":"2025-06-01T03:41:19.606Z","description":"PreparingJob","endTime":"2025-06-01T03:41:19.612Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"Pending","endTime":"2025-06-01T03:41:16.446Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7487492824910445E9 - 1.7487491959362624E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1748749282.4910445,"start_time":1748749195.9362624},"jobId":"22669884","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:58.266Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:42:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749282.4910445},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"22669881","backend":"gizmo","start":"2025-06-01T03:41:16.446Z","end":"2025-06-01T03:41:56.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:41:19.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:55.707Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:56.363Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:19.612Z","description":"RunningJob","endTime":"2025-06-01T03:41:55.707Z"},{"startTime":"2025-06-01T03:41:19.606Z","description":"PreparingJob","endTime":"2025-06-01T03:41:19.612Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"Pending","endTime":"2025-06-01T03:41:16.446Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7487492824910445E9 - 1.7487491959362624E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1748749282.4910445,"start_time":1748749195.9362624},"jobId":"22669884","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:58.266Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:42:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749282.4910445},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"22669881","backend":"gizmo","start":"2025-06-01T03:41:16.446Z","end":"2025-06-01T03:41:56.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:41:19.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:55.707Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:56.363Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:19.612Z","description":"RunningJob","endTime":"2025-06-01T03:41:55.707Z"},{"startTime":"2025-06-01T03:41:19.606Z","description":"PreparingJob","endTime":"2025-06-01T03:41:19.612Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"Pending","endTime":"2025-06-01T03:41:16.446Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7487492824910445E9 - 1.7487491959362624E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1748749282.4910445,"start_time":1748749195.9362624},"jobId":"22669884","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:58.266Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:42:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749282.4910445},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"22669881","backend":"gizmo","start":"2025-06-01T03:41:16.446Z","end":"2025-06-01T03:41:56.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:41:19.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:55.707Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:56.363Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:19.612Z","description":"RunningJob","endTime":"2025-06-01T03:41:55.707Z"},{"startTime":"2025-06-01T03:41:19.606Z","description":"PreparingJob","endTime":"2025-06-01T03:41:19.612Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"Pending","endTime":"2025-06-01T03:41:16.446Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7487492824910445E9 - 1.7487491959362624E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1748749282.4910445,"start_time":1748749195.9362624},"jobId":"22669884","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:58.266Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:42:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749282.4910445},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"22669881","backend":"gizmo","start":"2025-06-01T03:41:16.446Z","end":"2025-06-01T03:41:56.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:41:19.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:55.707Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:56.363Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:19.612Z","description":"RunningJob","endTime":"2025-06-01T03:41:55.707Z"},{"startTime":"2025-06-01T03:41:19.606Z","description":"PreparingJob","endTime":"2025-06-01T03:41:19.612Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"Pending","endTime":"2025-06-01T03:41:16.446Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7487492824910445E9 - 1.7487491959362624E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1748749282.4910445,"start_time":1748749195.9362624},"jobId":"22669884","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:58.266Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:42:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749282.4910445},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"22669881","backend":"gizmo","start":"2025-06-01T03:41:16.446Z","end":"2025-06-01T03:41:56.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:41:19.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:55.707Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:56.363Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:19.612Z","description":"RunningJob","endTime":"2025-06-01T03:41:55.707Z"},{"startTime":"2025-06-01T03:41:19.606Z","description":"PreparingJob","endTime":"2025-06-01T03:41:19.612Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"Pending","endTime":"2025-06-01T03:41:16.446Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7487492824910445E9 - 1.7487491959362624E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1748749282.4910445,"start_time":1748749195.9362624},"jobId":"22669884","backend":"gizmo","attempt":1,"start":"2025-06-01T03:41:58.266Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:42:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12639'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj7.fhcrc.org:43325
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj7.fhcrc.org:43325/api/workflows/v1/76f0944f-d54e-4d8d-bb3e-6a242305c794/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-46fd75b","description":"PickedUp","timestamp":"2025-06-01T03:39:46.238Z","cromwellVersion":"87"},{"cromwellId":"cromid-46fd75b","description":"Finished","timestamp":"2025-06-01T03:42:40.088Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749195.9362624},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"22669873","backend":"gizmo","start":"2025-06-01T03:39:47.712Z","end":"2025-06-01T03:40:29.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:39:49.607Z","description":"PreparingJob","endTime":"2025-06-01T03:39:50.257Z"},{"startTime":"2025-06-01T03:40:28.489Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:40:29.363Z"},{"startTime":"2025-06-01T03:39:47.713Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:39:49.606Z"},{"startTime":"2025-06-01T03:39:49.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:39:49.607Z"},{"startTime":"2025-06-01T03:39:47.712Z","description":"Pending","endTime":"2025-06-01T03:39:47.713Z"},{"startTime":"2025-06-01T03:39:50.257Z","description":"RunningJob","endTime":"2025-06-01T03:40:28.489Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1748749195.9362624,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"22669874","backend":"gizmo","start":"2025-06-01T03:40:30.547Z","end":"2025-06-01T03:41:15.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:40:39.606Z","description":"PreparingJob","endTime":"2025-06-01T03:40:39.617Z"},{"startTime":"2025-06-01T03:41:14.915Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:15.363Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:40:39.606Z"},{"startTime":"2025-06-01T03:40:39.617Z","description":"RunningJob","endTime":"2025-06-01T03:41:14.915Z"},{"startTime":"2025-06-01T03:40:30.547Z","description":"Pending","endTime":"2025-06-01T03:40:30.547Z"},{"startTime":"2025-06-01T03:40:39.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:40:39.606Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1748749282.4910445},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"22669881","backend":"gizmo","start":"2025-06-01T03:41:16.446Z","end":"2025-06-01T03:41:56.363Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:41:19.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:55.707Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:41:56.363Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:41:19.606Z"},{"startTime":"2025-06-01T03:41:19.612Z","description":"RunningJob","endTime":"2025-06-01T03:41:55.707Z"},{"startTime":"2025-06-01T03:41:19.606Z","description":"PreparingJob","endTime":"2025-06-01T03:41:19.612Z"},{"startTime":"2025-06-01T03:41:16.446Z","description":"Pending","endTime":"2025-06-01T03:41:16.446Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stdout","backendStatus":"Done","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7487492824910445E9 - 1.7487491959362624E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"outputs":{"within_limit":true,"duration_seconds":86.5548},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1748749282.4910445,"start_time":1748749195.9362624},"returnCode":0,"jobId":"22669884","backend":"gizmo","start":"2025-06-01T03:41:58.266Z","end":"2025-06-01T03:42:38.361Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-ValidateExecutionTime","attempt":1,"executionEvents":[{"startTime":"2025-06-01T03:41:59.606Z","description":"WaitingForValueStore","endTime":"2025-06-01T03:41:59.607Z"},{"startTime":"2025-06-01T03:41:59.612Z","description":"RunningJob","endTime":"2025-06-01T03:42:37.756Z"},{"startTime":"2025-06-01T03:42:37.756Z","description":"UpdatingJobStore","endTime":"2025-06-01T03:42:38.361Z"},{"startTime":"2025-06-01T03:41:59.607Z","description":"PreparingJob","endTime":"2025-06-01T03:41:59.612Z"},{"startTime":"2025-06-01T03:41:58.266Z","description":"RequestingExecutionToken","endTime":"2025-06-01T03:41:59.606Z"},{"startTime":"2025-06-01T03:41:58.266Z","description":"Pending","endTime":"2025-06-01T03:41:58.266Z"}]}]},"outputs":{"HelloDockerHostname.execution_time_seconds":86.5548,"HelloDockerHostname.within_time_limit":true,"HelloDockerHostname.stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794/call-Hostname/execution/stdout"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/76f0944f-d54e-4d8d-bb3e-6a242305c794","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-06-01T03:42:40.088Z","start":"2025-06-01T03:39:46.240Z","id":"76f0944f-d54e-4d8d-bb3e-6a242305c794","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-76f0944f-d54e-4d8d-bb3e-6a242305c794"},"submission":"2025-06-01T03:39:36.993Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 01 Jun 2025 03:42:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '13941'
    status:
      code: 200
      message: OK
version: 1
