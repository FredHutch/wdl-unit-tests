interactions:
- request:
    body: "--a5d63c649030a7ac5490ffac7d9bf5fc\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"gpuAlloc.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
      TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
      2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication works
      correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File
      test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n
      \       Array[Float] matrix_result = GpuTest.multiplication_result\n    }\n\n
      \   parameter_meta {\n        test_results: \"Complete log of the GPU test including
      tensor operations and GPU detection\"\n        gpu_count: \"Number of GPUs detected
      by TensorFlow\"\n        matrix_result: \"Results of the matrix multiplication
      operation\"\n    }\n}\n\ntask GpuTest {\n    command <<<\n        python3 <<CODE\n
      \       import tensorflow as tf\n        import numpy as np\n\n        # Test
      GPU availability\n        gpus = tf.config.experimental.list_physical_devices('GPU')\n
      \       detected_gpus = len(gpus)\n        print(f\"Number of GPUs detected:
      {detected_gpus}\")\n\n        # Verify GPU allocation matches runtime specification\n
      \       expected_gpus = 1  # Matches the runtime.gpus specification\n        if
      detected_gpus != expected_gpus:\n            raise RuntimeError(f\"GPU allocation
      mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n
      \       # Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0,
      4.0, 5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0,
      4.0, 5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n
      \       result = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n
      \       print(\"\\nMatrix A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix
      B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix Multiplication
      Result:\")\n        print(result.numpy())\n        \n        # Save results
      for output\n        np.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\n
      \       with open(\"gpu_count.txt\", \"w\") as f:\n            f.write(str(len(gpus)))\n
      \       CODE\n    >>>\n\n    output {\n        File results = stdout()\n        Int
      detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float] multiplication_result
      = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime {\n        docker:
      \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules: \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n
      \       gpus: \"1\"\n    }\n\n    parameter_meta {\n        results: \"Output
      log containing GPU detection and matrix multiplication results\"\n        detected_gpus:
      \"Number of GPUs detected by TensorFlow\"\n        multiplication_result: \"Flattened
      array containing the result of matrix multiplication\"\n    }\n}\n\r\n--a5d63c649030a7ac5490ffac7d9bf5fc\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--a5d63c649030a7ac5490ffac7d9bf5fc--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3160'
      content-type:
      - multipart/form-data; boundary=a5d63c649030a7ac5490ffac7d9bf5fc
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1
  response:
    body:
      string: '{"id":"50bd84d8-e731-4666-8ac2-8faeda86af32","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:23:53 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:23:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3807'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3807'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:24:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:25:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:25:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:25:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:25:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:25:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:25:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:25:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:25:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:25:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:25:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:25:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:26:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:27:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:28:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:29:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:30:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:30:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:30:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:30:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:30:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:30:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:30:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:30:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:30:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:30:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:30:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:31:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:32:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:33:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:34:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:35:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:35:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:35:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:35:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:35:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:35:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:35:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:35:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:35:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:35:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:35:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:36:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:37:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:38:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","compressedDockerSize":"2871239351","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5682'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"31902967","backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","backendStatus":"Running","compressedDockerSize":"2871239351","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5727'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"31902967","backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","backendStatus":"Running","compressedDockerSize":"2871239351","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5727'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"31902967","backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","backendStatus":"Running","compressedDockerSize":"2871239351","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:39:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5727'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"31902967","backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","backendStatus":"Running","compressedDockerSize":"2871239351","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:40:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5727'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"31902967","backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","backendStatus":"Running","compressedDockerSize":"2871239351","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:40:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5727'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"31902967","backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","backendStatus":"Running","compressedDockerSize":"2871239351","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:40:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5727'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"31902967","backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","backendStatus":"Running","compressedDockerSize":"2871239351","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:40:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5727'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"31902967","backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","backendStatus":"Running","compressedDockerSize":"2871239351","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:40:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5727'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"31902967","backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","backendStatus":"Running","compressedDockerSize":"2871239351","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:40:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5727'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"31902967","backend":"gizmo","attempt":1,"start":"2025-09-07T03:24:35.782Z","backendStatus":"Running","compressedDockerSize":"2871239351","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:40:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5727'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj5.fhcrc.org:33817
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj5.fhcrc.org:33817/api/workflows/v1/50bd84d8-e731-4666-8ac2-8faeda86af32/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-8c8d93d","description":"Finished","timestamp":"2025-09-07T03:40:38.652Z","cromwellVersion":"87"},{"cromwellId":"cromid-8c8d93d","description":"PickedUp","timestamp":"2025-09-07T03:24:34.709Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"GpuMatrixMult.GpuTest":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","commandLine":"python3
        <<CODE\nimport tensorflow as tf\nimport numpy as np\n\n# Test GPU availability\ngpus
        = tf.config.experimental.list_physical_devices(''GPU'')\ndetected_gpus = len(gpus)\nprint(f\"Number
        of GPUs detected: {detected_gpus}\")\n\n# Verify GPU allocation matches runtime
        specification\nexpected_gpus = 1  # Matches the runtime.gpus specification\nif
        detected_gpus != expected_gpus:\n    raise RuntimeError(f\"GPU allocation
        mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n\n#
        Create test matrices\nmatrix_a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
        shape=[2, 3])\nmatrix_b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3,
        2])\n\n# Perform matrix multiplication\nresult = tf.matmul(matrix_a, matrix_b)\n\n#
        Print results\nprint(\"\\nMatrix A:\")\nprint(matrix_a.numpy())\nprint(\"\\nMatrix
        B:\")\nprint(matrix_b.numpy())\nprint(\"\\nMatrix Multiplication Result:\")\nprint(result.numpy())\n\n#
        Save results for output\nnp.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\nwith
        open(\"gpu_count.txt\", \"w\") as f:\n    f.write(str(len(gpus)))\nCODE","shardIndex":-1,"outputs":{"multiplication_result":[22.0,28.0,49.0,64.0],"results":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout","detected_gpus":1},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"tensorflow/tensorflow:2.11.0-gpu","modules":"","gpus":"1","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"31902967","backend":"gizmo","start":"2025-09-07T03:24:35.782Z","backendStatus":"Done","compressedDockerSize":"2871239351","end":"2025-09-07T03:40:36.818Z","dockerImageUsed":"tensorflow/tensorflow@sha256:67f1a7b35fd52bdda071c0cd311655be7477f2bc1b6f27e014b9a57231bd55b3","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest","attempt":1,"executionEvents":[{"startTime":"2025-09-07T03:24:35.783Z","description":"Pending","endTime":"2025-09-07T03:24:35.783Z"},{"startTime":"2025-09-07T03:24:44.702Z","description":"RunningJob","endTime":"2025-09-07T03:40:36.594Z"},{"startTime":"2025-09-07T03:24:44.191Z","description":"PreparingJob","endTime":"2025-09-07T03:24:44.702Z"},{"startTime":"2025-09-07T03:24:35.783Z","description":"RequestingExecutionToken","endTime":"2025-09-07T03:24:44.190Z"},{"startTime":"2025-09-07T03:40:36.594Z","description":"UpdatingJobStore","endTime":"2025-09-07T03:40:36.818Z"},{"startTime":"2025-09-07T03:24:44.190Z","description":"WaitingForValueStore","endTime":"2025-09-07T03:24:44.191Z"}]}]},"outputs":{"GpuMatrixMult.gpu_count":1,"GpuMatrixMult.matrix_result":[22.0,28.0,49.0,64.0],"GpuMatrixMult.test_results":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32/call-GpuTest/execution/stdout"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/50bd84d8-e731-4666-8ac2-8faeda86af32","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-09-07T03:40:38.652Z","start":"2025-09-07T03:24:34.711Z","id":"50bd84d8-e731-4666-8ac2-8faeda86af32","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-50bd84d8-e731-4666-8ac2-8faeda86af32"},"submission":"2025-09-07T03:23:53.983Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 07 Sep 2025 03:40:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7182'
    status:
      code: 200
      message: OK
version: 1
