name: Validate Cromwell Caching

on:
  pull_request:
  workflow_dispatch:

jobs:
  validate-cromwell-cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          
      - name: Download Cromwell
        run: |
          wget https://github.com/broadinstitute/cromwell/releases/download/85/cromwell-85.jar
          
      - name: First run
        id: first-run
        run: |
          echo "Running first execution..."
          start_time=$(date +%s)
          java -Dconfig.file=cacheTest/cromwell.conf -jar cromwell-85.jar run cacheTest/cacheTest.wdl -i cacheTest/inputs.json -o cacheTest/options.json
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "first_duration=$duration" >> $GITHUB_OUTPUT
          
          # Find the workflow directory more robustly
          workflow_dir=$(find . -type d -name "CacheTest" -path "*/cromwell-executions/*" | sort -r | head -1)
          if [ -z "$workflow_dir" ]; then
            echo "::error::Could not find workflow execution directory"
            exit 1
          fi
          
          latest_run=$(find "$workflow_dir" -mindepth 1 -maxdepth 1 -type d | sort -r | head -1)
          workflow_id=$(basename "$latest_run")
          echo "First workflow ID: $workflow_id"
          
          # Find and validate output file
          output_file="$latest_run/call-GenerateTimestamp/execution/output.txt"
          if [ ! -f "$output_file" ]; then
            echo "::error::Could not find output.txt at $output_file"
            exit 1
          fi
          execution_id=$(grep "Execution ID:" "$output_file" | cut -d' ' -f3)
          echo "first_execution_id=$execution_id" >> $GITHUB_OUTPUT
          echo "first_workflow_id=$workflow_id" >> $GITHUB_OUTPUT
          echo "First run output file: $output_file"
          cat "$output_file"
          
      - name: Second run (should use cache)
        id: second-run
        run: |
          echo "Running second execution..."
          start_time=$(date +%s)
          java -Dconfig.file=cacheTest/cromwell.conf -jar cromwell-85.jar run cacheTest/cacheTest.wdl -i cacheTest/inputs.json -o cacheTest/options.json
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "second_duration=$duration" >> $GITHUB_OUTPUT
          
          # Find the most recent workflow directory that's different from the first
          workflow_dir=$(find . -type d -name "CacheTest" -path "*/cromwell-executions/*" | sort -r | head -1)
          latest_runs=$(find "$workflow_dir" -mindepth 1 -maxdepth 1 -type d | sort -r)
          workflow_id=$(echo "$latest_runs" | grep -v "${{ steps.first-run.outputs.first_workflow_id }}" | head -1 | xargs basename)
          echo "Second workflow ID: $workflow_id"
          
          # Find and validate output file
          output_file="$workflow_dir/$workflow_id/call-GenerateTimestamp/execution/output.txt"
          if [ ! -f "$output_file" ]; then
            echo "::error::Could not find output.txt at $output_file"
            exit 1
          fi
          execution_id=$(grep "Execution ID:" "$output_file" | cut -d' ' -f3)
          echo "second_execution_id=$execution_id" >> $GITHUB_OUTPUT
          echo "second_workflow_id=$workflow_id" >> $GITHUB_OUTPUT
          echo "Second run output file: $output_file"
          cat "$output_file"

      - name: Validate caching behavior
        run: |
          echo "First run duration: ${{ steps.first-run.outputs.first_duration }} seconds"
          echo "Second run duration: ${{ steps.second-run.outputs.second_duration }} seconds"
          echo "First execution ID: ${{ steps.first-run.outputs.first_execution_id }}"
          echo "Second execution ID: ${{ steps.second-run.outputs.second_execution_id }}"
          
          # Verify both runs completed
          if [ -z "${{ steps.first-run.outputs.first_workflow_id }}" ] || [ -z "${{ steps.second-run.outputs.second_workflow_id }}" ]; then
            echo "::error::One or both workflow runs failed to complete"
            exit 1
          fi
          
          # Check for cache hit messages in the logs
          second_workflow_dir=$(find . -type d -name "${{ steps.second-run.outputs.second_workflow_id }}" -path "*/cromwell-executions/*")
          if ! grep -q "Cache hit" "$second_workflow_dir/call-GenerateTimestamp/execution/stdout"; then
            echo "::error::No cache hit message found in logs"
            exit 1
          fi
          
          # Verify execution IDs match (indicating cache was used)
          if [ "${{ steps.first-run.outputs.first_execution_id }}" != "${{ steps.second-run.outputs.second_execution_id }}" ]; then
            echo "::error::Cache validation failed! Execution IDs don't match between runs."
            exit 1
          fi
          
          # Verify second run was significantly faster
          if [ ${{ steps.second-run.outputs.second_duration }} -gt $(( ${{ steps.first-run.outputs.first_duration }} / 2 )) ]; then
            echo "::error::Cache validation failed! Second run took too long (${steps.second-run.outputs.second_duration}s), suggesting cache wasn't used."
            exit 1
          fi
          
          echo "Cache validation passed!"
